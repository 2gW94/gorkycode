document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('routeForm');
    const submitBtn = document.getElementById('submitBtn');
    const btnText = submitBtn.querySelector('.btn-text');
    const btnLoader = submitBtn.querySelector('.btn-loader');
    const resultsSection = document.getElementById('resultsSection');
    const routeResults = document.getElementById('routeResults');
    const errorMessage = document.getElementById('errorMessage');

    form.addEventListener('submit', async function(e) {
        e.preventDefault();

   
        hideError();
        resultsSection.style.display = 'none';
        setLoading(true);


        const formData = {
            interests: document.getElementById('interests').value.trim(),
            time_hours: parseFloat(document.getElementById('time').value),
            location: document.getElementById('location').value.trim()
        };

        try {
           
            const response = await fetch('/api/generate_route', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formData)
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞');
            }

           
            if (data.—É—Å–ø–µ—à–Ω–æ === false) {
                throw new Error(data.–æ—à–∏–±–∫–∞ || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç');
            }

    
            displayRoute(data);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            showError(error.message);
        } finally {
            setLoading(false);
        }
    });

    function setLoading(isLoading) {
        submitBtn.disabled = isLoading;
        btnText.style.display = isLoading ? 'none' : 'inline';
        btnLoader.style.display = isLoading ? 'inline-flex' : 'none';
    }

    function showError(message) {
        errorMessage.textContent = '‚ùå ' + message;
        errorMessage.style.display = 'block';
        errorMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }

    function hideError() {
        errorMessage.style.display = 'none';
    }

    function displayRoute(data) {
        let html = '';


        if (data.–æ–±—â–µ–µ_–æ–ø–∏—Å–∞–Ω–∏–µ) {
            html += `
                <div class="route-overview">
                    <h3>üéØ –û–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞</h3>
                    <p>${escapeHtml(data.–æ–±—â–µ–µ_–æ–ø–∏—Å–∞–Ω–∏–µ)}</p>
                    <div class="route-stats">
                        <div class="stat-item">
                            <span>‚è±Ô∏è</span>
                            <span><strong>–û–±—â–µ–µ –≤—Ä–µ–º—è:</strong> ${data.–æ–±—â–µ–µ_–≤—Ä–µ–º—è_–º–∏–Ω—É—Ç || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'} –º–∏–Ω—É—Ç</span>
                        </div>
                        <div class="stat-item">
                            <span>üìç</span>
                            <span><strong>–ú–µ—Å—Ç:</strong> ${data.–º–∞—Ä—à—Ä—É—Ç?.length || 0}</span>
                        </div>
                    </div>
                </div>
            `;
        }


        if (data.–∫–∞—Ç–µ–≥–æ—Ä–∏–∏_–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ && data.–∫–∞—Ç–µ–≥–æ—Ä–∏–∏_–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.length > 0) {
            html += `
                <div style="margin-bottom: 24px;">
                    <strong style="display: block; margin-bottom: 12px;">üè∑Ô∏è –ü–æ–¥–æ–±—Ä–∞–Ω–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</strong>
                    <div class="interest-tags">
                        ${data.–∫–∞—Ç–µ–≥–æ—Ä–∏–∏_–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.map(cat => 
                            `<span class="interest-tag">${escapeHtml(cat)}</span>`
                        ).join(' ')}
                    </div>
                </div>
            `;
        }

        if (data.–º–∞—Ä—à—Ä—É—Ç && data.–º–∞—Ä—à—Ä—É—Ç.length > 0) {
            html += '<h3 style="margin-top: 24px; margin-bottom: 16px;">üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç</h3>';

            data.–º–∞—Ä—à—Ä—É—Ç.forEach(place => {
                html += `
                    <div class="route-place">
                        <div class="place-header">
                            <div class="place-number">${place.–ø–æ—Ä—è–¥–æ–∫}</div>
                            <div class="place-info">
                                <h4>${escapeHtml(place.–Ω–∞–∑–≤–∞–Ω–∏–µ)}</h4>
                                <div class="place-address">üìç ${escapeHtml(place.–∞–¥—Ä–µ—Å)}</div>
                                ${place.–≤—Ä–µ–º—è_–ø–æ—Å–µ—â–µ–Ω–∏—è_–º–∏–Ω—É—Ç ? 
                                    `<span class="place-time">‚è±Ô∏è ${place.–≤—Ä–µ–º—è_–ø–æ—Å–µ—â–µ–Ω–∏—è_–º–∏–Ω—É—Ç} –º–∏–Ω—É—Ç</span>` 
                                    : ''}
                            </div>
                        </div>
                        
                        ${place.–ø–æ—á–µ–º—É_–≤—ã–±—Ä–∞–Ω–æ ? `
                            <div class="place-reason">
                                <strong>üéØ –ü–æ—á–µ–º—É —ç—Ç–æ –º–µ—Å—Ç–æ:</strong>
                                <p>${escapeHtml(place.–ø–æ—á–µ–º—É_–≤—ã–±—Ä–∞–Ω–æ)}</p>
                            </div>
                        ` : ''}
                        
                        ${place.—á—Ç–æ_–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å ? `
                            <div class="place-todo">
                                <strong>üëÄ –ß—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:</strong>
                                <p>${escapeHtml(place.—á—Ç–æ_–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å)}</p>
                            </div>
                        ` : ''}
                    </div>
                `;
            });
        }

        if (data.—Å–æ–≤–µ—Ç—ã && data.—Å–æ–≤–µ—Ç—ã.length > 0) {
            html += `
                <div class="tips-section">
                    <h4>üí° –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã</h4>
                    <ul>
                        ${data.—Å–æ–≤–µ—Ç—ã.map(tip => 
                            `<li>${escapeHtml(tip)}</li>`
                        ).join('')}
                    </ul>
                </div>
            `;
        }

        routeResults.innerHTML = html;
        resultsSection.style.display = 'block';
        resultsSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }

    function escapeHtml(text) {
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
});